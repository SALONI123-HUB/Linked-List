#include<iostream>
using namespace std;

class Node{
    public:
    int data;
    Node* next;

    Node(int data){
        this->data = data;
        this->next = NULL;
    }

    // Function to reverse the linked list
    Node* Reversell(Node* head){
        if(head == NULL || head->next == NULL){
            return head;
        }
        Node* prev = NULL;
        Node* curr = head;
        Node* forward = NULL;

        while(curr != NULL){
            forward = curr->next;  // Save next node
            curr->next = prev;     // Reverse the link
            prev = curr;           // Move prev to current
            curr = forward;        // Move curr to next node (forward)
        }
        return prev;  // New head of the reversed list
    }
};

// Function to print the linked list
void printList(Node* head) {
    Node* temp = head;
    while(temp != NULL) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL" << endl;
}

int main() {
    // Creating a simple linked list: 1 -> 2 -> 3 -> 4 -> NULL
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);
    head->next->next->next = new Node(4);

    cout << "Original Linked List: ";
    printList(head);

    // Reversing the linked list
    head = head->Reversell(head);

    cout << "Reversed Linked List: ";
    printList(head);

    return 0;
}
